// Code generated by ent, DO NOT EDIT.

package events

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the events type in the database.
	Label = "events"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSexAge holds the string denoting the sex_age field in the database.
	FieldSexAge = "sex_age"
	// FieldDiscipline holds the string denoting the discipline field in the database.
	FieldDiscipline = "discipline"
	// FieldTimeStart holds the string denoting the time_start field in the database.
	FieldTimeStart = "time_start"
	// FieldTimeEnd holds the string denoting the time_end field in the database.
	FieldTimeEnd = "time_end"
	// FieldVenue holds the string denoting the venue field in the database.
	FieldVenue = "venue"
	// FieldParticipants holds the string denoting the participants field in the database.
	FieldParticipants = "participants"
	// FieldSportID holds the string denoting the sport_id field in the database.
	FieldSportID = "sport_id"
	// Table holds the table name of the events in the database.
	Table = "events"
)

// Columns holds all SQL columns for events fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSexAge,
	FieldDiscipline,
	FieldTimeStart,
	FieldTimeEnd,
	FieldVenue,
	FieldParticipants,
	FieldSportID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Events queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySexAge orders the results by the sex_age field.
func BySexAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSexAge, opts...).ToFunc()
}

// ByDiscipline orders the results by the discipline field.
func ByDiscipline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscipline, opts...).ToFunc()
}

// ByTimeStart orders the results by the time_start field.
func ByTimeStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeStart, opts...).ToFunc()
}

// ByTimeEnd orders the results by the time_end field.
func ByTimeEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeEnd, opts...).ToFunc()
}

// ByVenue orders the results by the venue field.
func ByVenue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVenue, opts...).ToFunc()
}

// ByParticipants orders the results by the participants field.
func ByParticipants(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParticipants, opts...).ToFunc()
}

// BySportID orders the results by the sport_id field.
func BySportID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSportID, opts...).ToFunc()
}
