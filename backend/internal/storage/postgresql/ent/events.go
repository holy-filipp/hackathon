// Code generated by ent, DO NOT EDIT.

package ent

import (
	"calendar-backend/internal/storage/postgresql/ent/events"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Events is the model entity for the Events schema.
type Events struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SexAge holds the value of the "sex_age" field.
	SexAge string `json:"sex_age,omitempty"`
	// Discipline holds the value of the "discipline" field.
	Discipline string `json:"discipline,omitempty"`
	// TimeStart holds the value of the "time_start" field.
	TimeStart time.Time `json:"time_start,omitempty"`
	// TimeEnd holds the value of the "time_end" field.
	TimeEnd time.Time `json:"time_end,omitempty"`
	// Venue holds the value of the "venue" field.
	Venue string `json:"venue,omitempty"`
	// Participants holds the value of the "participants" field.
	Participants int `json:"participants,omitempty"`
	// SportID holds the value of the "sport_id" field.
	SportID      string `json:"sport_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Events) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case events.FieldID, events.FieldParticipants:
			values[i] = new(sql.NullInt64)
		case events.FieldName, events.FieldSexAge, events.FieldDiscipline, events.FieldVenue, events.FieldSportID:
			values[i] = new(sql.NullString)
		case events.FieldTimeStart, events.FieldTimeEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Events fields.
func (e *Events) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case events.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case events.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case events.FieldSexAge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex_age", values[i])
			} else if value.Valid {
				e.SexAge = value.String
			}
		case events.FieldDiscipline:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discipline", values[i])
			} else if value.Valid {
				e.Discipline = value.String
			}
		case events.FieldTimeStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_start", values[i])
			} else if value.Valid {
				e.TimeStart = value.Time
			}
		case events.FieldTimeEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_end", values[i])
			} else if value.Valid {
				e.TimeEnd = value.Time
			}
		case events.FieldVenue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field venue", values[i])
			} else if value.Valid {
				e.Venue = value.String
			}
		case events.FieldParticipants:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field participants", values[i])
			} else if value.Valid {
				e.Participants = int(value.Int64)
			}
		case events.FieldSportID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sport_id", values[i])
			} else if value.Valid {
				e.SportID = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Events.
// This includes values selected through modifiers, order, etc.
func (e *Events) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Events.
// Note that you need to call Events.Unwrap() before calling this method if this Events
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Events) Update() *EventsUpdateOne {
	return NewEventsClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Events entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Events) Unwrap() *Events {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Events is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Events) String() string {
	var builder strings.Builder
	builder.WriteString("Events(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("sex_age=")
	builder.WriteString(e.SexAge)
	builder.WriteString(", ")
	builder.WriteString("discipline=")
	builder.WriteString(e.Discipline)
	builder.WriteString(", ")
	builder.WriteString("time_start=")
	builder.WriteString(e.TimeStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("time_end=")
	builder.WriteString(e.TimeEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("venue=")
	builder.WriteString(e.Venue)
	builder.WriteString(", ")
	builder.WriteString("participants=")
	builder.WriteString(fmt.Sprintf("%v", e.Participants))
	builder.WriteString(", ")
	builder.WriteString("sport_id=")
	builder.WriteString(e.SportID)
	builder.WriteByte(')')
	return builder.String()
}

// EventsSlice is a parsable slice of Events.
type EventsSlice []*Events
